@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using Badaboom.Core.Models.Enums
@using Badaboom.Core.Models.Request
@using System.Text.Json
@using System.Numerics 

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog">
        <div class="modal-content card-main">

            <div class="modal-header" style="border: 0px;">
                <label class="f-bold f-s-35 text-clr-dark" id="staticBackdropLabel">Buy requsts</label>
                <label class="f-regular">/@Product.ToString()</label>
            </div>

            <div class="modal-body">
                <form class="form-inline">
                    <div class="col-md-7 col-sm-12 f-medium f-s-20 text-clr-dark">Quantity of requests</div>
                    <label class="col-md col-sm-12 f-medium text-clr-dark" style="font-size: 19px;">@(Nethereum.Web3.Web3.Convert.FromWei(ProductPrice.PricePerItem)) Eth per item</label>
                </form>
                <input type="range" class="mr-2" style="width:100%" min="1" max="1000" @bind="@QuantityForBuy" />
                <form class="form-inline col center">
                    <input type="number" class="input pl-2 mr-2" min="1" max="1000" @bind="@QuantityForBuy" />
                    <label class="f-medium text-clr-dark f-s-20"> * @(Nethereum.Web3.Web3.Convert.FromWei(ProductPrice.PricePerItem)) = @(Nethereum.Web3.Web3.Convert.FromWei(TotalPrice)) Eth (Discount - @CurrentDiscount%)</label> 
                </form>
            </div>

            <div class="modal-footer" style="border: 0px;">
                <button type="button" class="btn b-secondary" data-dismiss="modal" disabled="@loading" @onclick="Close">Close</button>
                <button type="button" class="btn b-secondary clr-main" disabled="@loading" @onclick="Buy">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1 mb-1"></span>
                    }
                    Buy
                </button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}



@code {
    private bool loading = false;

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    [Parameter]
    public Filtration Filtration { get; set; }

    [Inject]
    public IHttpService _httpService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;

    private int quantityForBuy = 1;

    public int QuantityForBuy
    {
        get => quantityForBuy;

        set
        {
            quantityForBuy = value > 1000 ? 1000 : value < 1 ? 1 : value;
            CountTotalPrice();
            StateHasChanged();
        }
    }

    public byte CurrentDiscount { get; set; }

    public ProductPriceResponse ProductPrice { get; set; } = new ProductPriceResponse();

    public BigInteger TotalPrice { get; set; }

    public IOrderedEnumerable<KeyValuePair<int, byte>> SortedDiscounts { get; set; }

    public ProductType Product { get; set; }

    public int Quantity
    {
        get
        {
            if (Filtration._authService.User != null && Filtration._authService.User.AvailableProduct.ContainsKey(ProductType.ArgumentFunctionRequests.ToString()))
            {
                return Filtration._authService.User.AvailableProduct[ProductType.ArgumentFunctionRequests.ToString()];
            }
            else
            {
                return default;
            }
        }
    }


    public async Task Open(ProductType productType)
    {
        Filtration.Explorer.Loading = false;

        Product = productType;

        var response = await _httpService.Get($"/api/Payment/productPrice?ProductType={ProductType.ArgumentFunctionRequests}");
        ProductPrice = JsonSerializer.Deserialize<ProductPriceResponse>(response,
            new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

        TotalPrice = ProductPrice.PricePerItem;
        SortedDiscounts = ProductPrice.AmountFromPercents.OrderByDescending(x => x.Key);

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public async Task Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        loading = false;
        StateHasChanged();
    }

    public async Task Buy()
    {
        loading = true;

        StateHasChanged();

        string toAddress = (await _httpService.Get<WalletAddress>("/api/Payment/walletAddressToSend"))?.walletAddress; // generate ex if auth token ends

        if (toAddress is null)
        {
            System.Console.WriteLine("User unauthorized");
            NavigationManager.NavigateTo("logout");
            loading = false;
            return;
        }

        string txnHash;

        try
        {
            txnHash = await Filtration.MetaMaskService.SendTransaction(toAddress, TotalPrice);

            if (await CheckIsSuccessTransaction(txnHash))
            {
                Console.WriteLine("(Transaction status code success)");

                await _httpService.Post<PurchaseRequest>("/api/payment/purchase", new PurchaseRequest()
                {
                    ProductType = Product,
                    Quantity = QuantityForBuy,
                    TxnHash = txnHash
                });

                if (Filtration._authService.User.AvailableProduct.ContainsKey(Product.ToString()))
                {
                    Filtration._authService.User.AvailableProduct[Product.ToString()] += QuantityForBuy;
                }
                else
                {
                    Filtration._authService.User.AvailableProduct.Add(Product.ToString(), QuantityForBuy);
                }

                await Filtration._localStorageService.SetItem("user", Filtration._authService.User);
            }
            else
            {
                Console.WriteLine("(There is something wrong with your transaction)");
                loading = false;
                return;
            }
        }
        catch (MetaMask.Blazor.Exceptions.UserDeniedException)
        {
            System.Console.WriteLine($"User Denied");
            loading = false;
            return;
        }

        System.Console.WriteLine($"TX Hash: {txnHash}");

        await Filtration.FilterPro();

        await Close();
    }

    private async Task<bool> CheckIsSuccessTransaction(string txnHash)
    {
        int maxCycle = 18 * 2;
        int cycle = 0;
        Console.WriteLine($"Wait between 5 and 180 seconds, we check your transaction");
        while (cycle < maxCycle)
        {
            Nethereum.Web3.Web3 web3 = new(config.GetSection("RPCUrls")["EthRopsten"]);
            var transaction = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(txnHash);

            await Task.Delay(5_000);

            try
            {
                if (transaction.Status.Value == 1)
                {
                    return true;
                }
            }
            catch (NullReferenceException)
            {
                Console.WriteLine("(Pending)");
            }

            cycle++;
        }

        return false;
    }

    private class WalletAddress
    {
        public string walletAddress { get; set; }
    }

    private class ResponseQuantity
    {
        public int? Quantity { get; set; }
    }

    public void CountTotalPrice()
    {
        foreach (var item in SortedDiscounts)
        {
            if (QuantityForBuy >= item.Key)
            {
                TotalPrice = (BigInteger)ProductPrice.PricePerItem * QuantityForBuy * item.Value / 100;

                CurrentDiscount = (byte)(100 - item.Value);

                return;
            }
        }

        CurrentDiscount = 0;

        TotalPrice = ProductPrice.PricePerItem * QuantityForBuy;
    }
}