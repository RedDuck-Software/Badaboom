@using Badaboom.Core.Models.Request
@using Badaboom.Client.Pages
@using System.Text.RegularExpressions
@using System.Text.Json
@using Badaboom.Core.Models.DTOs
@using System.Net.Http.Headers
@using Badaboom.Client.Shared.DTOs

<div class=" d-flex justify-content-center">
    <div class="card col-sm-10 round-30">
        <div class="d-flex ml-3 mt-3 h4 font-weight-bold">
            To Filter
        </div>

        <div class="card-body">

            @if (SelectedFilters.IsAnyFilterSelected)
            {
            <dl class="row">
                @if (SelectedFilters.BlockNumber)
                {
                    <dt class="col-sm-6">
                        <label class="clr-secondary">Block number</label>
                        <div class="form-inline">
                            <input type="text" class="form-control mb-2 mr-sm-2 round-10" @bind="TransactionFilters.BlockNumber" placeholder="Filter by block number" />
                            <button type="button" class="btn btn-round mb-2 round-10 clr-danger"
                                    @onclick="async _ => {
                                                      TransactionFilters.BlockNumber = null;
                                                      SelectedFilters.BlockNumber = false;
                                                      await Index.Delete();
                                                  }">
                                Delete
                            </button>
                        </div>
                    </dt>
                }
                @if (SelectedFilters.ContractAddress)
                {
                    <dt class="col-sm-6">
                        <label class="clr-secondary">Contract address</label>

                        <div class="form-inline">
                            <input type="text" class="form-control mb-2 mr-sm-2 round-10" @bind="TransactionFilters.ContractAddress" placeholder="Filter by contract address" />

                            <button type="button" class="btn btn-round mb-2 round-10"
                                    disabled="@(!ContractAddressRegex.IsMatch(TransactionFilters.ContractAddress ?? ""))"
                                    @onclick="GetAbi">
                                Method Filters
                            </button>

                            <button type="button" class="btn btn-round mb-2 round-10 clr-danger"
                                    @onclick="async _ => {
                                                      TransactionFilters.ContractAddress = null;
                                                      SelectedFilters.ContractAddress = false;
                                                      await Index.Delete();
                                                  }">
                                Delete
                            </button>
                        </div>

                        @if (ShowMethodFilter)
                        {
                            <Badaboom.Client.Shared.Filters.MethodsFiltering Index="Index"
                                                                             TransactionFilters="TransactionFilters"
                                                                             SelectedFilters="SelectedFilters"
                                                                             ContractMethods="ContractMethods" />

                        }
                    </dt>
                }

            </dl>
                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="button" class="btn btn-round d-flex justify-content-end clr-secondary" @onclick="Index.Filter">Filter</button>
                </div>
                <hr />
            }

            <h5 class="clr-secondary">You can also add filters</h5>
            <div class="d-grid gap-2 d-md-block">
                @if (!SelectedFilters.BlockNumber)
                {<button class="btn btn-round mr-1" type="button" @onclick="_ => SelectedFilters.BlockNumber = true">Block number</button>}
                @if (!SelectedFilters.ContractAddress)
                {<button class="btn btn-round ml-1 mr-1" type="button" @onclick="_ => SelectedFilters.ContractAddress = true">Contract address</button>}
            </div>

        </div>
    </div>

</div>


<div class="m-1 form-inline">
    <h3 class="mt-1 mr-1">Results</h3>
    @if (SelectedFilters.BlockNumber)
    {
        <button type="button" class="btn btn-round ml-1 mr-1"
                @onclick="async _ => {
                              TransactionFilters.BlockNumber = null;
                              SelectedFilters.BlockNumber = false;
                              await Index.Delete();
                          }">
            Block number <span class="clr-danger">🗙</span>
        </button>
    }
    @if (SelectedFilters.ContractAddress)
    {
        <button type="button" class="btn btn-round ml-1 mr-1"
                @onclick="async _ => {
                              TransactionFilters.ContractAddress = null;
                              TransactionFilters.MethodId = null;
                              SelectedFilters.ContractAddress = false;
                              SelectedFilters.MethodId= false;
                              await Index.Delete();
                          }">
            Contract address <span class="clr-danger">🗙</span>
        </button>
    }
</div>

@code {
    [Parameter]
    public GetFilteredTransactionRequest TransactionFilters { get; set; }

    public SelectedFiltersDTO SelectedFilters { get; set; } = new();

    [Parameter]
    public Pages.Index Index { get; set; }


    public Regex ContractAddressRegex = new Regex("^0x[a-fA-F0-9]{40}$");



    [Inject]
    public HttpClient HttpClient { get; set; }

    public IEnumerable<Method> ContractMethods { get; set; }

    public bool ShowMethodFilter { get; set; }


    public async Task GetAbi()
    {

        var httpResponse = await HttpClient.GetAsync($"api/Transaction/GetContractAbi?contractAddress={TransactionFilters.ContractAddress}");

        if (httpResponse.IsSuccessStatusCode)

        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();


            ContractMethods = JsonSerializer.Deserialize<IEnumerable<Method>>(responseString,
            new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }).Where(v => !string.IsNullOrEmpty(v.Name));


            Console.WriteLine("Contract abi :", responseString);

            ShowMethodFilter = true;
        }
        else
        {
            Console.WriteLine("Found is not found");
        }
    }
}
