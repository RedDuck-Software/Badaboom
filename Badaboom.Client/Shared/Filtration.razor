@using Badaboom.Core.Models.Request
@using Badaboom.Client.Pages
@using System.Text.RegularExpressions
@using System.Text.Json
@using Badaboom.Core.Models.DTOs
@using Badaboom.Client.Shared.DTOs
@using Badaboom.Client.Shared.Filters

<div class=" d-flex justify-content-center">
    <div class="card col-sm-10 round-30">
        <div class="d-flex ml-3 mt-3 h4 font-weight-bold">
            To Filter
        </div>

        <div class="card-body">

            @if (SelectedFilters.IsAnyFilterSelected)
            {
                <dl class="row">
                    @if (SelectedFilters.BlockNumber)
                    {
                        <FilterBlock Label="Block number"
                                     Type="number"
                                     PlaceHolder="Filter by block number"
                                     OnInput="v => TransactionFilters.BlockNumber = long.Parse(v.Value.ToString())"
                                     OnClick="_ => {
                                                  TransactionFilters.BlockNumber = null;
                                                  SelectedFilters.BlockNumber = false;
                                              }"/>
                    }

                    @if (SelectedFilters.ContractAddress)
                    {
                        <dt class="col-sm-6">
                            <label class="clr-secondary">Contract address</label>
                            <div class="form-inline">
                                <input type="text" class="form-control mb-2 mr-sm-2 round-10" placeholder="Filter by contract address" 
                                       @onchange="(value) => {
                                                      ShowMethodFilter = false;
                                                      ContractMethods = null;
                                                      TransactionFilters.ContractAddress = value.Value.ToString();
                                                  }" />
                                <button type="button" class="btn btn-round mb-2 round-10 clr-danger"
                                        @onclick="_ => {
                                                      TransactionFilters.ContractAddress = null;
                                                      TransactionFilters.MethodId = null;
                                                      SelectedFilters.ContractAddress = false;
                                                      SelectedFilters.MethodId = false;
                                                      ShowMethodFilter = false;
                                                      IsAbiAvailable = false;
                                                      ContractMethods = null;
                                                  }">
                                    Delete
                                </button>

                                <button type="button" class="btn btn-round mb-2 round-10"
                                        disabled="@(!ContractAddressRegex.IsMatch(TransactionFilters.ContractAddress ?? ""))"
                                        @onclick="GetAbi">
                                    Method Filters
                                    @if (Loading)
                                    {
                                        <span class="spinner-border spinner-border-sm mt-1 ml-1"></span>
                                    }
                                </button>
                            </div>
                        </dt>
                        <dt class="col-sm-6">
                            @if (ShowMethodFilter)
                            {
                                <Badaboom.Client.Shared.Filters.MethodsFiltering Index="Index"
                                                                                 TransactionFilters="TransactionFilters"
                                                                                 SelectedFilters="SelectedFilters"
                                                                                 ContractMethods="ContractMethods" />
                            }
                        </dt>
                    }

                    @if (SelectedFilters.From)
                    {
                        <FilterBlock Label="From Address" 
                                     PlaceHolder="Filter by «from»"
                                     OnInput="v => TransactionFilters.From = v.Value.ToString()"
                                     OnClick="_ => {
                                                  TransactionFilters.From = null;
                                                  SelectedFilters.From = false;
                                              }"/>
                    }

                    @if (SelectedFilters.To)
                    {
                        <FilterBlock Label="To Address" 
                                     PlaceHolder="Filter by «to»"
                                     OnInput="v => TransactionFilters.ContractAddress = v.Value.ToString()"
                                     OnClick="_ => {
                                                  TransactionFilters.ContractAddress = null;
                                                  SelectedFilters.To = false;
                                              }"/>
                    }
                </dl>

                @if (IsAbiAvailable)
                {
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-round d-flex justify-content-end clr-secondary" 
                                @onclick="FilterPro">
                            @if (Index.Loading)
                            {
                                <span class="spinner-border spinner-border-sm mt-1 mr-1"></span>
                            }
                            Filter <span class="clr-danger"> (Pro)</span>
                        </button>
                    </div>
                }
                else
                {
                    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                        <button type="button" class="btn btn-round d-flex justify-content-end clr-secondary" 
                                @onclick="Index.Filter">
                            @if (Index.Loading)
                            {
                                <span class="spinner-border spinner-border-sm mt-1 mr-1"></span>
                            }
                            Filter
                        </button>
                    </div>
                }
                <hr />
            }

            <h5 class="clr-secondary">You can also add filters</h5>
            <div class="d-grid gap-2 d-md-block">
                @if (!SelectedFilters.BlockNumber)
                {<button class="btn btn-round mr-1" type="button" @onclick="_ => SelectedFilters.BlockNumber = true">Block number</button>}
                @if (!SelectedFilters.ContractAddress)
                {<button class="btn btn-round ml-1 mr-1" type="button" disabled="@( SelectedFilters.To )" @onclick="_ => SelectedFilters.ContractAddress = true">Contract address</button>}
                @if (!SelectedFilters.From)
                {<button class="btn btn-round ml-1 mr-1" type="button" @onclick="_ => SelectedFilters.From = true">«From» Address</button>}
                @if (!SelectedFilters.To)
                {<button class="btn btn-round ml-1 mr-1" type="button" disabled="@( SelectedFilters.ContractAddress )" @onclick="_ => SelectedFilters.To = true">«To» Address</button>}
            </div>
        </div>
    </div>
</div>

<div class="m-1 form-inline">
    <h3 class="mt-1 mr-1">Results</h3>
    @if (SelectedFilters.BlockNumber)
    {
        <FilterButton OnClick="_ => {
                                   TransactionFilters.BlockNumber = null;
                                   SelectedFilters.BlockNumber = false;
                               }">
            By block number <span class="clr-danger">🗙</span>
        </FilterButton>
    }

    @if (SelectedFilters.ContractAddress)
    {
        <FilterButton OnClick="async _ => {
                                   TransactionFilters.DecodeInputDataInfo = null;
                                   TransactionFilters.ContractAddress = null;
                                   TransactionFilters.MethodId = null;
                                   SelectedFilters.ContractAddress = false;
                                   SelectedFilters.MethodId = false;
                                   ShowMethodFilter = false;
                                   IsAbiAvailable = false;
                                   ContractMethods = null;
                               }">
            By contract address <span class="clr-danger">🗙</span>
        </FilterButton>
    }

    @if (SelectedFilters.From)
    {
        <FilterButton OnClick="_ => {
                                   TransactionFilters.From = null;
                                   SelectedFilters.From = false;
                               }">
            By «from» <span class="clr-danger">🗙</span>
        </FilterButton>
    }

    @if (SelectedFilters.To)
    {
        <FilterButton OnClick="_ => {
                                  TransactionFilters.ContractAddress = null;
                                  SelectedFilters.To = false;
                              }">
            By «to» <span class="clr-danger">🗙</span>
        </FilterButton>
    }

    <div class="d-flex justify-content-end col font-weight-bold">
        <button type="button" class="btn btn-round d-flex justify-content-end clr-secondary p-2" 
                @onclick="Index.Filter">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise font-weight-bold" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z" />
                <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z" />
            </svg>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public Pages.Index Index { get; set; }

    [Parameter]
    public GetFilteredTransactionRequest TransactionFilters { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; }

    public Regex ContractAddressRegex = new Regex("^0x[a-fA-F0-9]{40}$");

    public SelectedFiltersDTO SelectedFilters { get; set; } = new();

    public IEnumerable<Method> ContractMethods { get; set; }

    public bool ShowMethodFilter { get; set; }

    public bool IsAbiAvailable { get; set; }

    public bool Loading { get; set; }


    public async Task GetAbi()
    {
        Loading = true;

        var httpResponse = await HttpClient.GetAsync($"api/Transaction/GetContractAbi?contractAddress={TransactionFilters.ContractAddress}");

        if (httpResponse.IsSuccessStatusCode)

        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();

            ContractMethods = JsonSerializer.Deserialize<IEnumerable<Method>>(responseString,
            new JsonSerializerOptions() { PropertyNameCaseInsensitive = true }).Where(v =>
                !string.IsNullOrEmpty(v.Name) &&
                    v.Type?.ToLower() == "function" &&
                    !(v.StateMutability?.ToLower() == "view"
                    || v.StateMutability?.ToLower() == "pure"));

            IsAbiAvailable = true;
        }
        else
        {
            Console.WriteLine("ABI is not found");
            IsAbiAvailable = false;
            // todo: hande error
        }

        Loading = false;

        ShowMethodFilter = true;
    }

    [Inject]
    public MetaMask.Blazor.MetaMaskService MetaMaskService { get; set; } = default!;

    [Inject]
    public IHttpService _httpService { get; set; }


    public async Task FilterPro()
    {
        // api: get quanity of requests
        // return false if zero requests -> make purchase
        bool isAvaibleUse = false;

        if (!isAvaibleUse) // buy requests
        {
            if (!await MetaMaskService.IsSiteConnected())
            {
                Console.WriteLine("Please login to use the filter(pro)");
                return;
            }

            string toAddress = await GetWalletAddress(); // generate ex if auth token ends

            // check price -> return 0.1m Eth (test value, coz method not implemented)
            decimal ethCost = 0.1m;

            System.Numerics.BigInteger weiValue = Nethereum.Web3.Web3.Convert.ToWei(ethCost);

            string txnHash;

            try
            {
                txnHash = await MetaMaskService.SendTransaction(toAddress, weiValue);

                if (await CheckIsSuccessTransaction(txnHash))
                {
                    Console.WriteLine("(Transaction status code success)");
                }
                else
                {
                    Console.WriteLine("(There is something wrong with your transaction)");
                    return;
                }
            }
            catch (MetaMask.Blazor.Exceptions.UserDeniedException)
            {
                System.Console.WriteLine($"User Denied");
                return;
            }

            System.Console.WriteLine($"TX Hash: {txnHash}");
        }
    }

    private async Task<string> GetWalletAddress()
    {
        var walletAddress = await _httpService.Get<WalletAddress>("/api/Payment/walletAddressToSend");
        return walletAddress.walletAddress;
    }

    private class WalletAddress
    {
        public string walletAddress { get; set; }
    }

    private async Task<bool> CheckIsSuccessTransaction(string txnHash)
    {
        int maxCicle = 18 * 2;
        int cicle = 0;
        Console.WriteLine($"Wait between 5 and 180 seconds, we check your transaction");
        while (cicle < maxCicle)
        {
            Nethereum.Web3.Web3 web3 = new("https://ropsten.infura.io/v3/89b011b73e644d77a85bad2a0cbe4e61");
            var transaction = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(txnHash);

            await Task.Delay(5_000);

            try
            {
                if (transaction.Status.Value == 1)
                {
                    return true;
                }
            }
            catch (Exception)
            {
                Console.WriteLine("(Pending)");
            }

            cicle++;
        }

        return false;
    }
}
