@using Microsoft.AspNetCore.Components.Web
@typeparam TItem
<div class="dropdown">
    <button type="button" class="btn b-danger dropdown-toggle mb-2 @AdditionalClass" style="color: #425466; width: 100%" data-toggle="dropdown"
            aria-haspopup="true" aria-expanded="false" @onclick="e => this.show=!this.show">
        @Tip
    </button>
    <CascadingValue name="Dropdown" Value="@this">
        <div class="dropdown-menu @(show? "show":"")">
            @ChildContent
        </div>
    </CascadingValue>
</div>

@code {
    [Parameter]
    public string AdditionalClass { get; set; } = "";

    [Parameter]
    public RenderFragment InitialTip { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<TItem> OnSelected { get; set; }

    [Parameter]
    public bool ReplaceInitialTip { get; set; } = true;

    private bool show = false;
    private RenderFragment Tip;

    protected override void OnInitialized() { this.Tip = InitialTip; }

    public async Task HandleSelect(TItem item, RenderFragment<TItem> contentFragment)
    {
        if (ReplaceInitialTip)
        {
            this.Tip = contentFragment.Invoke(item);
        }

        this.show = false;

        StateHasChanged();
        await this.OnSelected.InvokeAsync(item);
    }
}