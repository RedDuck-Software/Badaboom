@page "/details/{txnHash}"
@inject HttpClient Http;
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using Nethereum.Web3;
@using System.Globalization;
@using Badaboom.Client.Infrastructure.Models;

@if (IsHashAddressValid && transactionDetails == null)
{
    <p><em>Loading ...</em></p>
}
else if (IsHashAddressValid)
{
    <div class="card">
        <div class="card-header">
            <div class="d-flex align-items-center">
                <h5>Transaction Details</h5>
            </div>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">
                    Transaction Hash
                </dt>
                <dd class="col-sm-9">
                    @transactionDetails.TransactionHash
                </dd>
                <dt class="col-sm-3">
                    Status
                </dt>
                <dd class="col-sm-9">
                    @if (transactionReceipt.Status.Value == 1)
                    {
                        <div class="alert alert-success" role="alert">
                            Success
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger" role="alert">
                            Fail
                        </div>
                    }
                </dd>
                <dt class="col-sm-3">
                    Block
                </dt>
                <dd class="col-sm-9">
                    @transactionDetails.BlockNumber
                </dd>
                <dt class="col-sm-3">
                    Timestamp
                </dt>
                <dd class="col-sm-9">
                    @DateTimeOffset.FromUnixTimeSeconds(Timestamp).ToString("yyyy-MM-dd HH:mm:ss")
                </dd>
                <dt class="col-sm-3">
                    From
                </dt>
                <dd class="col-sm-9">
                    @transactionDetails.From
                </dd>
                <dt class="col-sm-3">
                    To
                </dt>
                <dd class="col-sm-9">
                    @transactionDetails.To
                </dd>
                <dt class="col-sm-3">
                    Value
                </dt>
                <dd class="col-sm-9">
                    @EthValue Ether ($@Math.Round(EthValue * EthPriceAtSpecificTime, 2))
                </dd>
                <dt class="col-sm-3">
                    Transaction Fee
                </dt>
                <dd class="col-sm-9">
                    @TransactionFee ($@Math.Round(TransactionFee * EthPriceAtSpecificTime, 2))
                </dd>
                <dt class="col-sm-3">
                    Gas Price
                </dt>
                <dd class="col-sm-9">
                    @GasPriceEth Ether (@((int)(GasPriceEth * 1_000_000_000)) Gwei)
                </dd>
                <dt class="col-sm-3">
                    Transaction Ether Price
                </dt>
                <dd class="col-sm-9">
                    $@EthPriceAtSpecificTime/Ether
                </dd>
                <dt class="col-sm-3">
                    Curent Ether Price
                </dt>
                <dd class="col-sm-9">
                    $@CurrentEthPrice/Ether
                </dd>
                <dt class="col-sm-3">
                    Input Data
                </dt>
                @if (InputData.MethodId.Length <= 2)
                {
                    <dd class="col-sm-9">
                        0x
                    </dd>
                }
                else
                {
                    if (DisplayInputSetings == DisplayInput.DefaultView)
                    {
                        <dd class="col-sm-9">
                            MethodID: @InputData.MethodId<br />
                            @for (int i = 0; i < InputData.Parametrs.Count; i++)
                            {
                                @($"[{i}]: 0x{InputData.Parametrs[i]}") <br />
                            }

                        </dd>
                    }
                    else if (DisplayInputSetings == DisplayInput.Original)
                    {
                        <dd class="col-sm-9">
                            <div style="max-width: 500px;">@transactionDetails.Input</div>
                        </dd>
                    }

                    <dt class="col-sm-3" />
                    <dd class="col-sm-9">
                        <div class="dropdown dropup">
                            <button class="btn btn-primary dropdown-toggle mr-4"
                                    data-toggle="dropdown"
                                    type="button"
                                    aria-haspopup="true"
                                    aria-expanded="false"
                                    @onclick="e => this.show=!this.show">
                                View Input As
                            </button>
                            <ul class="dropdown-menu @(show? "show":"")" aria-labelledby="dropdownMenuButton1" @onclick="_ => this.show = false">
                                <li><a class="dropdown-item" @onclick="_ => DisplayInputSetings = DisplayInput.Original">Original</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" @onclick="_ => DisplayInputSetings = DisplayInput.DefaultView">Default view</a></li>
                            </ul>
                        </div>
                    </dd>
                }
            </dl>
        </div>
    </div>
}
else
{
    <p><em>Transaction hash address is not valid</em></p>
}



@code {
    private bool show = false;

    private bool IsHashAddressValid { get; set; } = true;
    private uint Timestamp { get; set; }
    private decimal GasPriceEth { get; set; }
    private decimal EthPriceAtSpecificTime { get; set; }
    private decimal CurrentEthPrice { get; set; }
    private decimal TransactionFee { get; set; }
    private decimal EthValue { get; set; }
    private TransactionInputData InputData { get; set; }
    private DisplayInput DisplayInputSetings { get; set; } = DisplayInput.Original;

    [Parameter]
    public string txnHash { get; set; }

    Nethereum.RPC.Eth.DTOs.Transaction transactionDetails;
    Nethereum.RPC.Eth.DTOs.TransactionReceipt transactionReceipt;

    public enum DisplayInput
    {
        Original,
        DefaultView
    }

    protected override async Task OnInitializedAsync()
    {
        Web3 web3 = new(config.GetSection("RPCUrls")["Eth"]);

        try
        {
            transactionDetails = await web3.Eth.Transactions.GetTransactionByHash.SendRequestAsync(txnHash);
            IsHashAddressValid = true;
        }
        catch (Nethereum.JsonRpc.Client.RpcResponseException)
        {
            IsHashAddressValid = false;
        }

        if (IsHashAddressValid)
        {
            transactionReceipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(txnHash);

            var result = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(transactionDetails.BlockNumber);
            Timestamp = (uint)result.Timestamp.Value;

            EthValue = Web3.Convert.FromWei(transactionDetails.Value.Value);

            EthPriceAtSpecificTime = await GetTransactionPriceEthInUSD(Timestamp);
            CurrentEthPrice = await GetCurrentPriceEthInUSD();

            GasPriceEth = Web3.Convert.FromWei(transactionDetails.GasPrice.Value);

            TransactionFee = GasPriceEth * (long)transactionDetails.Gas.Value;

            InputData = DecodeInputData(transactionDetails.Input);
        }
    }

    private async Task<decimal> GetTransactionPriceEthInUSD(long startTime)
    {
        startTime = (startTime - 60) * 1000;
        string url = $"https://api.binance.com/api/v3/klines?symbol=ETHUSDT&startTime={startTime}&interval=1m&limit=1";

        using var client = new HttpClient();

        var response = await client.GetAsync(url);

        string content = await response.Content.ReadAsStringAsync();

        string ethToUsdPrice = content.Split("\"")[1];

        return Math.Round(decimal.Parse(ethToUsdPrice, CultureInfo.InvariantCulture), 2);
    }

    private async Task<decimal> GetCurrentPriceEthInUSD()
    {
        string url = $"https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT";

        using var client = new HttpClient();

        var response = await client.GetAsync(url);

        string content = await response.Content.ReadAsStringAsync();

        string ethToUsdPrice = content.Split("\"")[7];

        return Math.Round(decimal.Parse(ethToUsdPrice, CultureInfo.InvariantCulture), 2);
    }

    private TransactionInputData DecodeInputData(string inputData)
    {
        if (inputData.Length <= 2)
        {
            return new() { MethodId = inputData };
        }

        TransactionInputData data = new();

        data.MethodId = inputData.Substring(0, 10);

        for (int i = 10; i <= inputData.Length - 64; i += 64)
        {
            data.Parametrs.Add(inputData.Substring(i, 64));
        }

        return data;
    }
}
